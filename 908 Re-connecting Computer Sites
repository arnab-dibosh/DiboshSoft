#include <bits/stdc++.h>
#define Max_Node 1000000
using namespace std;
int mst();
int findPar(int n);

struct edge{
    int u, v, w;

    bool operator <(const edge& x)const
    {
        return w<x.w;
    }
};
vector<edge> edgeList;
int par[Max_Node], started;

int main()
{
    int n=0;

    while(scanf("%d", &n)!=EOF)
    {
        int k, m, cst=0;
        edge e;

        for(int i=1; i<=n; i++) par[i]=i;
        edgeList.clear();
        if(started) cout<<endl;
        started=1;

        while(--n)
        {
            scanf("%d %d %d", &e.u, &e.v, &e.w);
            cst+=e.w;
        }
        cout<<cst<<endl;
        cin>>k;
        while(k--)
        {
            scanf("%d %d %d", &e.u, &e.v, &e.w);
            edgeList.push_back(e);
        }
        cin>>m;
        while(m--)
        {
            scanf("%d %d %d", &e.u, &e.v, &e.w);
            edgeList.push_back(e);
        }
        cst=mst();
        cout<<cst<<endl;
    }


}

int mst()
{
    int cst=0;

    sort(edgeList.begin(), edgeList.end());

    for(int i=0; i<edgeList.size(); i++)
    {
        edge e=edgeList[i];
        int paru=findPar(e.u);
        int parv=findPar(e.v);

        if(paru!=parv)
        {
            par[paru]=parv;
            cst+=e.w;
        }
    }

    return cst;
}

int findPar(int n)
{
    if(n==par[n]) return n;
    else return par[n]= findPar(par[n]);
}
